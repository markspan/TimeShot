<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TimeShot</name>
    </assembly>
    <members>
        <member name="F:TimeShot.CameraInfo.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TimeShot.CameraInfo.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TimeShot.CameraInfo.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TimeShot.CameraOutputForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TimeShot.CameraOutputForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TimeShot.CameraOutputForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TimeShot.MainForm.GetAvailableCameras">
            <summary>
            Detect available cameras and add them to the CameraBox control.
            </summary>
        </member>
        <member name="M:TimeShot.MainForm.CreateStreamButton_Click(System.Object,System.EventArgs)">
            <summary>
            Create camera sessions and preview windows for selected cameras.
            </summary>
        </member>
        <member name="M:TimeShot.MainForm.StreamButton_Click(System.Object,System.EventArgs)">
            <summary>
            Start recording for all active camera sessions.
            </summary>
        </member>
        <member name="M:TimeShot.MainForm.StopButton_Click(System.Object,System.EventArgs)">
            <summary>
            Stop button with contextual behavior: stop recording, close streams, or exit.
            </summary>
        </member>
        <member name="F:TimeShot.MainForm.components">
            <summary>
             Required designer variable.
            </summary>
        </member>
        <member name="M:TimeShot.MainForm.Dispose(System.Boolean)">
            <summary>
             Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TimeShot.MainForm.InitializeComponent">
            <summary>
             Required method for Designer support - do not modify
             the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TimeShot.CameraSession">
            <summary>
            Represents a single camera session.
            </summary>
        </member>
        <member name="M:TimeShot.CameraSession.Start">
            <summary>
            Start recording.
            </summary>
        </member>
        <member name="M:TimeShot.CameraSession.Stop">
            <summary>
            Stop recording.
            </summary>
        </member>
        <member name="P:TimeShot.CameraSession.IsRecording">
            <summary>
            Indicates whether the session is currently recording.
            </summary>
        </member>
        <member name="T:TimeShot.CameraFrameStreamer">
            <summary>
            Captures and streams frames from a camera device.
            </summary>
        </member>
        <member name="P:TimeShot.CameraFrameStreamer.IsRecording">
            <summary>
            Indicates whether recording is active.
            </summary>
        </member>
        <member name="M:TimeShot.CameraFrameStreamer.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes the frame streamer and dynamically sets the form size based on capture resolution.
            </summary>
        </member>
        <member name="M:TimeShot.CameraFrameStreamer.StartRecording">
            <summary>
            Begin recording to file and LSL.
            </summary>
        </member>
        <member name="M:TimeShot.CameraFrameStreamer.Stop">
            <summary>
            Stop recording and release all resources.
            </summary>
        </member>
        <member name="M:TimeShot.CameraFrameStreamer.CaptureLoopAsync(System.Threading.CancellationToken)">
            <summary>
            Capture loop: updates preview and optionally records and streams.
            </summary>
        </member>
        <member name="M:TimeShot.Program.Main">
            <summary>
             The main entry point for the application.
            </summary>
        </member>
        <member name="T:TimeShot.ApplicationConfiguration">
            <summary>
             Bootstrap the application configuration.
            </summary>
        </member>
        <member name="M:TimeShot.ApplicationConfiguration.Initialize">
            <summary>
             Bootstrap the application as follows:
             <code>
             global::System.Windows.Forms.Application.EnableVisualStyles();
             global::System.Windows.Forms.Application.SetCompatibleTextRenderingDefault(false);
             global::System.Windows.Forms.Application.SetHighDpiMode(HighDpiMode.SystemAware);
            </code>
            </summary>
        </member>
        <member name="T:LSL.LSLObject">
            <summary>
            C# API for the lab streaming layer.
            
            The lab streaming layer provides a set of functions to make instrument data accessible 
            in real time within a lab network. From there, streams can be picked up by recording programs, 
            viewing programs or custom experiment applications that access data streams in real time.
            
            The API covers two areas:
            - The "push API" allows to create stream outlets and to push data (regular or irregular measurement 
              time series, event data, coded audio/video frames, etc.) into them.
            - The "pull API" allows to create stream inlets and read time-synched experiment data from them 
              (for recording, viewing or experiment control).
            
            </summary>
        </member>
        <member name="M:LSL.LSLObject.DestroyLSLObject(System.IntPtr)">
            <summary>
            To be implemented in inheriting classes: the liblsl function to destroy the internal object
            </summary>
        </member>
        <member name="T:LSL.LSL">
            <summary>
            Static functions implemented in liblsl
            </summary>
        </member>
        <member name="M:LSL.LSL.DisposeArray(LSL.StreamInfo[])">
            <summary>
            Helper method to dispose a StreamInfo[] array
            </summary>
            <param name="arr">Array to be disposed</param>
        </member>
        <member name="F:LSL.LSL.IRREGULAR_RATE">
            <summary>Constant to indicate that a stream has variable sampling rate.</summary>
        </member>
        <member name="F:LSL.LSL.DEDUCED_TIMESTAMP">
            Constant to indicate that a sample has the next successive time stamp.
            This is an optional optimization to transmit less data per sample.
            The stamp is then deduced from the preceding one according to the stream's sampling rate 
            (in the case of an irregular rate, the same time stamp as before will is assumed).
        </member>
        <member name="F:LSL.LSL.FOREVER">
            <summary>
                    A very large time duration (> 1 year) for timeout values.
                    Note that significantly larger numbers can cause the timeout to be invalid on some operating systems (e.g., 32-bit UNIX).
                    </summary>
        </member>
        <member name="M:LSL.LSL.protocol_version">
            Protocol version.
            The major version is protocol_version() / 100;
            The minor version is protocol_version() % 100;
            Clients with different minor versions are protocol-compatible with each other 
            while clients with different major versions will refuse to work together.
        </member>
        <member name="M:LSL.LSL.library_version">
            Version of the liblsl library.
            The major version is library_version() / 100;
            The minor version is library_version() % 100;
        </member>
        <member name="M:LSL.LSL.local_clock">
            Obtain a local system time stamp in seconds. The resolution is better than a millisecond.
            This reading can be used to assign time stamps to samples as they are being acquired. 
            If the "age" of a sample is known at a particular time (e.g., from USB transmission 
            delays), it can be used as an offset to local_clock() to obtain a better estimate of 
            when a sample was actually captured. See stream_outlet::push_sample() for a use case.
        </member>
        <member name="M:LSL.LSL.resolve_streams(System.Double)">
            Resolve all streams on the network.
            This function returns all currently available streams from any outlet on the network.
            The network is usually the subnet specified at the local router, but may also include 
            a multicast group of machines (given that the network supports it), or list of hostnames.
            These details may optionally be customized by the experimenter in a configuration file 
            (see Network Connectivity in the LSL wiki).
            This is the default mechanism used by the browsing programs and the recording program.
            @param wait_time The waiting time for the operation, in seconds, to search for streams.
                             Warning: If this is too short (less than 0.5s) only a subset (or none) of the 
                                      outlets that are present on the network may be returned.
            @return An array of stream info objects (excluding their desc field), any of which can 
                    subsequently be used to open an inlet. The full info can be retrieve from the inlet.
        </member>
        <member name="M:LSL.LSL.resolve_stream(System.String,System.String,System.Int32,System.Double)">
            Resolve all streams with a specific value for a given property.
            If the goal is to resolve a specific stream, this method is preferred over resolving all streams and then selecting the desired one.
            @param prop The stream_info property that should have a specific value (e.g., "name", "type", "source_id", or "desc/manufaturer").
            @param value The string value that the property should have (e.g., "EEG" as the type property).
            @param minimum Optionally return at least this number of streams.
            @param timeout Optionally a timeout of the operation, in seconds (default: no timeout).
                            If the timeout expires, less than the desired number of streams (possibly none) will be returned.
            @return An array of matching stream info objects (excluding their meta-data), any of 
                    which can subsequently be used to open an inlet.
        </member>
        <!-- Badly formed XML comment ignored for member "M:LSL.LSL.resolve_stream(System.String,System.Int32,System.Double)" -->
        <member name="M:LSL.LSL.check_error(System.Int32)">
            <summary>Check an error condition and throw an exception if appropriate.</summary>
        </member>
        <member name="T:LSL.channel_format_t">
            <summary>Data format of a channel (each transmitted sample holds an array of channels).</summary>
        </member>
        <member name="T:LSL.processing_options_t">
            Post-processing options for stream inlets.
        </member>
        <member name="M:LSL.StreamInfo.#ctor(System.String,System.String,System.Int32,System.Double,LSL.channel_format_t,System.String)">
            Construct a new StreamInfo object.
            Core stream information is specified here. Any remaining meta-data can be added later.
            @param name Name of the stream. Describes the device (or product series) that this stream makes available 
                        (for use by programs, experimenters or data analysts). Cannot be empty.
            @param type Content type of the stream. Please see https://github.com/sccn/xdf/wiki/Meta-Data (or web search for:
                        XDF meta-data) for pre-defined content-type names, but you can also make up your own.
                        The content type is the preferred way to find streams (as opposed to searching by name).
            @param channel_count Number of channels per sample. This stays constant for the lifetime of the stream.
            @param nominal_srate The sampling rate (in Hz) as advertised by the data source, if regular (otherwise set to IRREGULAR_RATE).
            @param channel_format Format/type of each channel. If your channels have different formats, consider supplying 
                                  multiple streams or use the largest type that can hold them all (such as cf_double64).
            @param source_id Unique identifier of the device or source of the data, if available (such as the serial number). 
                             This is critical for system robustness since it allows recipients to recover from failure even after the 
                             serving app, device or computer crashes (just by finding a stream with the same source id on the network again).
                             Therefore, it is highly recommended to always try to provide whatever information can uniquely identify the data source itself.
        </member>
        <member name="M:LSL.StreamInfo.name">
            Name of the stream.
            This is a human-readable name. For streams offered by device modules, it refers to the type of device or product series 
            that is generating the data of the stream. If the source is an application, the name may be a more generic or specific identifier.
            Multiple streams with the same name can coexist, though potentially at the cost of ambiguity (for the recording app or experimenter).
        </member>
        <member name="M:LSL.StreamInfo.type">
            Content type of the stream.
            The content type is a short string such as "EEG", "Gaze" which describes the content carried by the channel (if known). 
            If a stream contains mixed content this value need not be assigned but may instead be stored in the description of channel types.
            To be useful to applications and automated processing systems using the recommended content types is preferred. 
            Content types usually follow those pre-defined in https://github.com/sccn/xdf/wiki/Meta-Data (or web search for: XDF meta-data).
        </member>
        <member name="M:LSL.StreamInfo.channel_count">
            Number of channels of the stream.
            A stream has at least one channel; the channel count stays constant for all samples.
        </member>
        <member name="M:LSL.StreamInfo.nominal_srate">
             Sampling rate of the stream, according to the source (in Hz).
             If a stream is irregularly sampled, this should be set to IRREGULAR_RATE.
            
             Note that no data will be lost even if this sampling rate is incorrect or if a device has temporary 
             hiccups, since all samples will be recorded anyway (except for those dropped by the device itself). However, 
             when the recording is imported into an application, a good importer may correct such errors more accurately 
             if the advertised sampling rate was close to the specs of the device.
        </member>
        <member name="M:LSL.StreamInfo.channel_format">
            Channel format of the stream.
            All channels in a stream have the same format. However, a device might offer multiple time-synched streams 
            each with its own format.
        </member>
        <member name="M:LSL.StreamInfo.source_id">
            Unique identifier of the stream's source, if available.
            The unique source (or device) identifier is an optional piece of information that, if available, allows that
            endpoints (such as the recording program) can re-acquire a stream automatically once it is back online.
        </member>
        <member name="M:LSL.StreamInfo.version">
            Protocol version used to deliver the stream.
        </member>
        <member name="M:LSL.StreamInfo.created_at">
            Creation time stamp of the stream.
            This is the time stamp when the stream was first created
            (as determined via local_clock() on the providing machine).
        </member>
        <member name="M:LSL.StreamInfo.uid">
            Unique ID of the stream outlet instance (once assigned).
            This is a unique identifier of the stream outlet, and is guaranteed to be different
            across multiple instantiations of the same outlet (e.g., after a re-start).
        </member>
        <member name="M:LSL.StreamInfo.session_id">
            Session ID for the given stream.
            The session id is an optional human-assigned identifier of the recording session.
            While it is rarely used, it can be used to prevent concurrent recording activitites 
            on the same sub-network (e.g., in multiple experiment areas) from seeing each other's streams 
            (assigned via a configuration file by the experimenter, see Network Connectivity in the LSL wiki).
        </member>
        <member name="M:LSL.StreamInfo.hostname">
            Hostname of the providing machine.
        </member>
        <member name="M:LSL.StreamInfo.desc">
             Extended description of the stream.
             It is highly recommended that at least the channel labels are described here. 
             See code examples on the LSL wiki. Other information, such as amplifier settings, 
             measurement units if deviating from defaults, setup information, subject information, etc., 
             can be specified here, as well. Meta-data recommendations follow the XDF file format project
             (github.com/sccn/xdf/wiki/Meta-Data or web search for: XDF meta-data).
            
             Important: if you use a stream content type for which meta-data recommendations exist, please 
             try to lay out your meta-data in agreement with these recommendations for compatibility with other applications.
        </member>
        <!-- Badly formed XML comment ignored for member "M:LSL.StreamInfo.as_xml" -->
        <member name="T:LSL.StreamOutlet">
            A stream outlet.
            Outlets are used to make streaming data (and the meta-data) available on the lab network.
        </member>
        <member name="M:LSL.StreamOutlet.#ctor(LSL.StreamInfo,System.Int32,System.Int32)">
            Establish a new stream outlet. This makes the stream discoverable.
            @param info The stream information to use for creating this stream. Stays constant over the lifetime of the outlet.
            @param chunk_size Optionally the desired chunk granularity (in samples) for transmission. If unspecified, 
                              each push operation yields one chunk. Inlets can override this setting.
            @param max_buffered Optionally the maximum amount of data to buffer (in seconds if there is a nominal 
                                sampling rate, otherwise x100 in samples). The default is 6 minutes of data. 
        </member>
        <member name="M:LSL.StreamOutlet.push_sample(System.Single[],System.Double,System.Boolean)">
            Push an array of values as a sample into the outlet. 
            Each entry in the vector corresponds to one channel.
            @param data An array of values to push (one for each channel).
            @param timestamp Optionally the capture time of the sample, in agreement with local_clock(); if omitted, the current time is used.
            @param pushthrough Optionally whether to push the sample through to the receivers instead of buffering it with subsequent samples.
                               Note that the chunk_size, if specified at outlet construction, takes precedence over the pushthrough flag.
        </member>
        <member name="M:LSL.StreamOutlet.push_chunk(System.Single[0:,0:],System.Double,System.Boolean)">
            Push a chunk of samples into the outlet. Single timestamp provided.
            @param data A rectangular array of values for multiple samples.
            @param timestamp Optionally the capture time of the most recent sample, in agreement with local_clock(); if omitted, the current time is used.
                              The time stamps of other samples are automatically derived based on the sampling rate of the stream.
            @param pushthrough Optionally whether to push the chunk through to the receivers instead of buffering it with subsequent samples.
                               Note that the chunk_size, if specified at outlet construction, takes precedence over the pushthrough flag.
        </member>
        <member name="M:LSL.StreamOutlet.push_chunk(System.Single[0:,0:],System.Double[],System.Boolean)">
            Push a chunk of multiplexed samples into the outlet. One timestamp per sample is provided.
            @param data A rectangular array of values for multiple samples.
            @param timestamps An array of timestamp values holding time stamps for each sample in the data buffer.
            @param pushthrough Optionally whether to push the chunk through to the receivers instead of buffering it with subsequent samples.
                               Note that the chunk_size, if specified at outlet construction, takes precedence over the pushthrough flag.
        </member>
        <member name="M:LSL.StreamOutlet.have_consumers">
            Check whether consumers are currently registered.
            While it does not hurt, there is technically no reason to push samples if there is no consumer.
        </member>
        <member name="M:LSL.StreamOutlet.wait_for_consumers(System.Double)">
            Wait until some consumer shows up (without wasting resources).
            @return True if the wait was successful, false if the timeout expired.
        </member>
        <member name="M:LSL.StreamOutlet.info">
            Retrieve the stream info provided by this outlet.
            This is what was used to create the stream (and also has the Additional Network Information fields assigned).
        </member>
        <member name="T:LSL.StreamInlet">
            A stream inlet.
            Inlets are used to receive streaming data (and meta-data) from the lab network.
        </member>
        <member name="M:LSL.StreamInlet.#ctor(LSL.StreamInfo,System.Int32,System.Int32,System.Boolean,LSL.processing_options_t)">
                            * Construct a new stream inlet from a resolved stream info.
                            * @param info A resolved stream info object (as coming from one of the resolver functions).
                            *             Note: the stream_inlet may also be constructed with a fully-specified stream_info, 
                            *                   if the desired channel format and count is already known up-front, but this is 
                            *                   strongly discouraged and should only ever be done if there is no time to resolve the 
                            *                   stream up-front (e.g., due to limitations in the client program).
                            * @param max_buflen Optionally the maximum amount of data to buffer (in seconds if there is a nominal 
                            *                   sampling rate, otherwise x100 in samples). Recording applications want to use a fairly 
                            *                   large buffer size here, while real-time applications would only buffer as much as 
                            *                   they need to perform their next calculation.
                            * @param max_chunklen Optionally the maximum size, in samples, at which chunks are transmitted 
                            *                     (the default corresponds to the chunk sizes used by the sender).
                            *                     Recording applications can use a generous size here (leaving it to the network how 
                            *                     to pack things), while real-time applications may want a finer (perhaps 1-sample) granularity.
                                                  If left unspecified (=0), the sender determines the chunk granularity.
                            * @param recover Try to silently recover lost streams that are recoverable (=those that that have a source_id set). 
                            *                In all other cases (recover is false or the stream is not recoverable) functions may throw a 
                            *                LostException if the stream's source is lost (e.g., due to an app or computer crash).
        </member>
        <member name="M:LSL.StreamInlet.info(System.Double)">
            Retrieve the complete information of the given stream, including the extended description.
            Can be invoked at any time of the stream's lifetime.
            @param timeout Timeout of the operation (default: no timeout).
            @throws TimeoutException (if the timeout expires), or LostException (if the stream source has been lost).
        </member>
        <member name="M:LSL.StreamInlet.open_stream(System.Double)">
            Subscribe to the data stream.
            All samples pushed in at the other end from this moment onwards will be queued and 
            eventually be delivered in response to pull_sample() or pull_chunk() calls. 
            Pulling a sample without some preceding open_stream is permitted (the stream will then be opened implicitly).
            @param timeout Optional timeout of the operation (default: no timeout).
            @throws TimeoutException (if the timeout expires), or LostException (if the stream source has been lost).
        </member>
        <member name="M:LSL.StreamInlet.close_stream">
            Drop the current data stream.
            All samples that are still buffered or in flight will be dropped and transmission 
            and buffering of data for this inlet will be stopped. If an application stops being 
            interested in data from a source (temporarily or not) but keeps the outlet alive, 
            it should call close_stream() to not waste unnecessary system and network 
            resources.
        </member>
        <member name="M:LSL.StreamInlet.time_correction(System.Double)">
            Retrieve an estimated time correction offset for the given stream.
            The first call to this function takes several miliseconds until a reliable first estimate is obtained.
            Subsequent calls are instantaneous (and rely on periodic background updates).
            The precision of these estimates should be below 1 ms (empirically within +/-0.2 ms).
            @timeout Timeout to acquire the first time-correction estimate (default: no timeout).
            @return The time correction estimate. This is the number that needs to be added to a time stamp 
                    that was remotely generated via lsl_local_clock() to map it into the local clock domain of this machine.
            @throws TimeoutException (if the timeout expires), or LostException (if the stream source has been lost).
        </member>
        <!-- Badly formed XML comment ignored for member "M:LSL.StreamInlet.pull_sample(System.Single[],System.Double)" -->
        <member name="M:LSL.StreamInlet.pull_chunk(System.Single[0:,0:],System.Double[],System.Double)">
            Pull a chunk of data from the inlet.
            @param data_buffer A pre-allocated buffer where the channel data shall be stored.
            @param timestamp_buffer A pre-allocated buffer where time stamps shall be stored. 
            @param timeout Optionally the timeout for this operation, if any. When the timeout expires, the function 
                           may return before the entire buffer is filled. The default value of 0.0 will retrieve only 
                           data available for immediate pickup.
            @return samples_written Number of samples written to the data and timestamp buffers.
            @throws LostException (if the stream source has been lost).
        </member>
        <member name="M:LSL.StreamInlet.samples_available">
            Query whether samples are currently available for immediate pickup.
            Note that it is not a good idea to use samples_available() to determine whether 
            a pull_*() call would block: to be sure, set the pull timeout to 0.0 or an acceptably
            low value. If the underlying implementation supports it, the value will be the number of 
            samples available (otherwise it will be 1 or 0).
        </member>
        <member name="M:LSL.StreamInlet.was_clock_reset">
            Query whether the clock was potentially reset since the last call to was_clock_reset().
            This is a rarely-used function that is only useful to applications that combine multiple time_correction 
            values to estimate precise clock drift; it allows to tolerate cases where the source machine was 
            hot-swapped or restarted in between two measurements.
        </member>
        <member name="T:LSL.XMLElement">
            A lightweight XML element tree; models the .desc() field of stream_info.
            Has a name and can have multiple named children or have text content as value; attributes are omitted.
            Insider note: The interface is modeled after a subset of pugixml's node type and is compatible with it.
            See also http://pugixml.googlecode.com/svn/tags/latest/docs/manual/access.html for additional documentation.
        </member>
        <member name="M:LSL.XMLElement.first_child">
            Get the first child of the element.
        </member>
        <member name="M:LSL.XMLElement.last_child">
            Get the last child of the element.
        </member>
        <member name="M:LSL.XMLElement.next_sibling">
            Get the next sibling in the children list of the parent node.
        </member>
        <member name="M:LSL.XMLElement.previous_sibling">
            Get the previous sibling in the children list of the parent node.
        </member>
        <member name="M:LSL.XMLElement.parent">
            Get the parent node.
        </member>
        <member name="M:LSL.XMLElement.child(System.String)">
            Get a child with a specified name.
        </member>
        <member name="M:LSL.XMLElement.next_sibling(System.String)">
            Get the next sibling with the specified name.
        </member>
        <member name="M:LSL.XMLElement.previous_sibling(System.String)">
            Get the previous sibling with the specified name.
        </member>
        <member name="M:LSL.XMLElement.empty">
            Whether this node is empty.
        </member>
        <member name="M:LSL.XMLElement.is_text">
            Whether this is a text body (instead of an XML element). True both for plain char data and CData.
        </member>
        <member name="M:LSL.XMLElement.name">
            Name of the element.
        </member>
        <member name="M:LSL.XMLElement.value">
            Value of the element.
        </member>
        <member name="M:LSL.XMLElement.child_value">
            Get child value (value of the first child that is text).
        </member>
        <member name="M:LSL.XMLElement.child_value(System.String)">
            Get child value of a child with a specified name.
        </member>
        <member name="M:LSL.XMLElement.append_child_value(System.String,System.String)">
            Append a child node with a given name, which has a (nameless) plain-text child with the given text value.
        </member>
        <member name="M:LSL.XMLElement.prepend_child_value(System.String,System.String)">
            Prepend a child node with a given name, which has a (nameless) plain-text child with the given text value.
        </member>
        <member name="M:LSL.XMLElement.set_child_value(System.String,System.String)">
            Set the text value of the (nameless) plain-text child of a named child node.
        </member>
        <member name="M:LSL.XMLElement.set_name(System.String)">
            Set the element's name.
            @return False if the node is empty.
        </member>
        <member name="M:LSL.XMLElement.set_value(System.String)">
            Set the element's value.
            @return False if the node is empty.
        </member>
        <member name="M:LSL.XMLElement.append_child(System.String)">
            Append a child element with the specified name.
        </member>
        <member name="M:LSL.XMLElement.prepend_child(System.String)">
            Prepend a child element with the specified name.
        </member>
        <member name="M:LSL.XMLElement.append_copy(LSL.XMLElement)">
            Append a copy of the specified element as a child.
        </member>
        <member name="M:LSL.XMLElement.prepend_copy(LSL.XMLElement)">
            Prepend a child element with the specified name.
        </member>
        <member name="M:LSL.XMLElement.remove_child(System.String)">
            Remove a child element with the specified name.
        </member>
        <member name="M:LSL.XMLElement.remove_child(LSL.XMLElement)">
            Remove a specified child element.
        </member>
        <member name="T:LSL.ContinuousResolver">
            A convenience class that resolves streams continuously in the background throughout 
            its lifetime and which can be queried at any time for the set of streams that are currently 
            visible on the network.
        </member>
        <member name="M:LSL.ContinuousResolver.#ctor(System.Double)">
            Construct a new continuous_resolver that resolves all streams on the network. 
            This is analogous to the functionality offered by the free function resolve_streams().
            @param forget_after When a stream is no longer visible on the network (e.g., because it was shut down),
                                this is the time in seconds after which it is no longer reported by the resolver.
        </member>
        <member name="M:LSL.ContinuousResolver.#ctor(System.String,System.String,System.Double)">
            Construct a new continuous_resolver that resolves all streams with a specific value for a given property.
            This is analogous to the functionality provided by the free function resolve_stream(prop,value).
            @param prop The stream_info property that should have a specific value (e.g., "name", "type", "source_id", or "desc/manufaturer").
            @param value The string value that the property should have (e.g., "EEG" as the type property).
            @param forget_after When a stream is no longer visible on the network (e.g., because it was shut down),
                                this is the time in seconds after which it is no longer reported by the resolver.
        </member>
        <member name="M:LSL.ContinuousResolver.#ctor(System.String,System.Double)">
            Construct a new continuous_resolver that resolves all streams that match a given XPath 1.0 predicate.
            This is analogous to the functionality provided by the free function resolve_stream(pred).
            @param pred The predicate string, e.g. "name='BioSemi'" or "type='EEG' and starts-with(name,'BioSemi') and count(info/desc/channel)=32"
            @param forget_after When a stream is no longer visible on the network (e.g., because it was shut down),
                                this is the time in seconds after which it is no longer reported by the resolver.
        </member>
        <member name="M:LSL.ContinuousResolver.results">
            Obtain the set of currently present streams on the network (i.e. resolve result).
            @return An array of matching stream info objects (excluding their meta-data), any of 
                    which can subsequently be used to open an inlet.
        </member>
        <member name="T:LSL.LostException">
            Exception class that indicates that a stream inlet's source has been irrecoverably lost.
        </member>
        <member name="T:LSL.InternalException">
            Exception class that indicates that an internal error has occurred inside liblsl.
        </member>
    </members>
</doc>
